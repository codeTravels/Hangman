package com.mycompany.hangman.gui;

import com.mycompany.hangman.drawing.DrawPanel;
import com.mycompany.hangman.model.Character;
import com.mycompany.hangman.model.HangmanGame;
import java.awt.event.ActionListener;
import java.beans.PropertyChangeEvent;
import java.util.List;
import javax.swing.text.AbstractDocument;

/**
 *
 * @author Cory
 */
public class GamePanel extends javax.swing.JPanel implements View
{

    /**
     * Creates new form GamePanel
     */
    public GamePanel()
    {
        initComponents();
        this.outputConsole.setEditable(false);
        ((AbstractDocument) this.guess.getDocument()).setDocumentFilter(new ValidGuessDocFilter());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        guessedLettersLabel = new javax.swing.JLabel();
        guessedLetters = new javax.swing.JLabel();
        guess = new javax.swing.JTextField();
        okButton = new javax.swing.JButton();
        outputScrollPane = new javax.swing.JScrollPane();
        outputConsole = new javax.swing.JTextArea();
        wordToGuess = new javax.swing.JLabel();
        drawPanel = new com.mycompany.hangman.drawing.DrawPanel();

        guessedLettersLabel.setText("Guessed Letters:");

        guessedLetters.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        guessedLetters.setText("jLabel2");

        guess.setText("Enter guess here ");
        guess.addFocusListener(new java.awt.event.FocusAdapter()
        {
            public void focusGained(java.awt.event.FocusEvent evt)
            {
                guessFocusGained(evt);
            }
        });

        okButton.setLabel("OK");

        outputScrollPane.setAutoscrolls(true);

        outputConsole.setColumns(20);
        outputConsole.setRows(5);
        outputScrollPane.setViewportView(outputConsole);

        wordToGuess.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        wordToGuess.setText("jLabel1");

        javax.swing.GroupLayout drawPanelLayout = new javax.swing.GroupLayout(drawPanel);
        drawPanel.setLayout(drawPanelLayout);
        drawPanelLayout.setHorizontalGroup(
            drawPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 198, Short.MAX_VALUE)
        );
        drawPanelLayout.setVerticalGroup(
            drawPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 198, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(guessedLettersLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(guessedLetters, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(guess, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(okButton))
                            .addComponent(outputScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(wordToGuess, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(drawPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(drawPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(guessedLettersLabel)
                            .addComponent(guessedLetters))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(guess, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(okButton))
                        .addGap(18, 18, 18)
                        .addComponent(wordToGuess)
                        .addGap(17, 17, 17)
                        .addComponent(outputScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void guessFocusGained(java.awt.event.FocusEvent evt)//GEN-FIRST:event_guessFocusGained
    {//GEN-HEADEREND:event_guessFocusGained
        guess.selectAll();
    }//GEN-LAST:event_guessFocusGained

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.mycompany.hangman.drawing.DrawPanel drawPanel;
    private javax.swing.JTextField guess;
    private javax.swing.JLabel guessedLetters;
    private javax.swing.JLabel guessedLettersLabel;
    private javax.swing.JButton okButton;
    private javax.swing.JTextArea outputConsole;
    private javax.swing.JScrollPane outputScrollPane;
    private javax.swing.JLabel wordToGuess;
    // End of variables declaration//GEN-END:variables

    @Override
    public void modelPropertyChange(PropertyChangeEvent evt)
    {
        if (evt.getPropertyName().equals(HangmanGame.OUT_TEXT))
        {
            for (Object object : ((Iterable) evt.getNewValue()))
            {
                println(object.toString());
            }
        }
        else if (evt.getPropertyName().equals(HangmanGame.CLEAR_OUT_TEXT))
        {
            clearOutputConsole();
        }
        else if (evt.getPropertyName().equals(HangmanGame.GUESSED_LETTER))
        {
            setGuessedLetters((List<Character>) evt.getNewValue());
            getDrawPanel().repaint();
        }
        else if (evt.getPropertyName().equals(HangmanGame.WORD))
        {
            setWordToGuess(evt.getNewValue().toString());
        }
    }

    public void setGuessedLetters(List<Character> guessedLetters)
    {
        StringBuilder builder = new StringBuilder();
        guessedLetters.forEach((guessedLetter) ->
        {
            builder.append(guessedLetter)
                    .append(" ");
        });
        this.guessedLetters.setText(builder.toString());

    }

    public void setWordToGuess(String string)
    {
        this.wordToGuess.setText(string);
    }

    private void println(String stringToPrint)
    {
        outputConsole.append(stringToPrint + "\n");
    }

    private void clearOutputConsole()
    {
        outputConsole.setText("");
    }

    public String consumeGuess()
    {
        String retVal = getGuess();
        clearGuess();
        return retVal.toUpperCase();
    }

    private String getGuess()
    {
        return guess.getText();
    }

    private void clearGuess()
    {
        guess.setText("");
    }

    public void addController(ActionListener listener)
    {
        guess.addActionListener(listener);
        okButton.addActionListener(listener);
    }

    public DrawPanel getDrawPanel()
    {
        return drawPanel;
    }

}
