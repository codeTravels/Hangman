package com.mycompany.hangman.gui;

import com.mycompany.hangman.model.GameConfig;
import com.mycompany.hangman.model.HangmanGame;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.PropertyChangeEvent;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author cory.bianchi
 */
public class ConfigPanel extends JPanel implements ConfigView
{

    private final Component parent;
    private ActionListener listener;

    /**
     * Creates new form ConfigPanel
     *
     * @param parent
     */
    public ConfigPanel(Component parent)
    {
        initComponents();
        this.parent = parent;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        guessLimitLabel = new javax.swing.JLabel();
        guessLimitSlider = new javax.swing.JSlider();

        guessLimitLabel.setText("Guess Limit:");

        guessLimitSlider.setMajorTickSpacing(2);
        guessLimitSlider.setMaximum(GameConfig.MAX_NUM_GUESSES);
        guessLimitSlider.setMinimum(GameConfig.MIN_NUM_GUESSES);
        guessLimitSlider.setMinorTickSpacing(1);
        guessLimitSlider.setPaintLabels(true);
        guessLimitSlider.setPaintTicks(true);
        guessLimitSlider.setSnapToTicks(true);
        guessLimitSlider.setToolTipText("");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(guessLimitLabel)
                .addGap(18, 18, 18)
                .addComponent(guessLimitSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(guessLimitSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(guessLimitLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel guessLimitLabel;
    private javax.swing.JSlider guessLimitSlider;
    // End of variables declaration//GEN-END:variables

    @Override
    public void modelPropertyChange(PropertyChangeEvent evt)
    {
        if (evt.getPropertyName().equals(HangmanGame.GAME_CONFIG))
        {
            GameConfig config = (GameConfig) evt.getNewValue();
            applyConfig(config);
        }
    }

    private void applyConfig(GameConfig config)
    {
        this.guessLimitSlider.setValue(config.getNumGuessesAllowed());
    }

    @Override
    public GameConfig getUserConfig()
    {
        GameConfig retVal = new GameConfig(guessLimitSlider.getValue());
        return retVal;
    }

    @Override
    public void display()
    {
        GameConfig originalConfig = getUserConfig();
        int userResponse = JOptionPane.showOptionDialog(parent,
                                                        this,
                                                        "Config",
                                                        JOptionPane.OK_CANCEL_OPTION,
                                                        JOptionPane.PLAIN_MESSAGE,
                                                        null,
                                                        null,
                                                        null);
        if (listener != null && userResponse == JOptionPane.OK_OPTION)
        {
            listener.actionPerformed(new ActionEvent(this, ActionEvent.ACTION_PERFORMED, "submit"));
        }
        else
        {
            applyConfig(originalConfig);
        }
    }

    @Override
    public void setListener(ActionListener listener)
    {
        this.listener = listener;
    }

    @Override
    public boolean isRestartAllowed()
    {
        int userResponse = JOptionPane.showConfirmDialog(parent,
                                                         "Game will reset. Do you want to continue with changes?",
                                                         "Game Reset",
                                                         JOptionPane.YES_NO_OPTION);
        return userResponse == JOptionPane.OK_OPTION;
    }
}
